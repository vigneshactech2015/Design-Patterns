Encapsulation:

Encapsulation involves bundling the data (properties) and methods (functions) that operate on the data into a single unit, such as a class or an object. We'll create a Car class that encapsulates properties like make, model, and year, as well as methods like start() and drive().

javascript
Copy code
class Car {
    constructor(make, model, year) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.started = false; // Encapsulated state
    }

    start() {
        this.started = true;
        console.log('Engine started');
    }

    drive() {
        if (this.started) {
            console.log(`Driving ${this.year} ${this.make} ${this.model}`);
        } else {
            console.log('Please start the engine first');
        }
    }
}

const myCar = new Car('Toyota', 'Camry', 2022);
myCar.start(); // Output: Engine started
myCar.drive(); // Output: Driving 2022 Toyota Camry
In this example:

The Car class encapsulates properties like make, model, year, and the state of whether the car is started or not (started).
Methods like start() and drive() operate on these properties, but the internal implementation details of these methods are hidden from the outside.
Abstraction:

Abstraction involves hiding the complex implementation details and showing only the essential features of an object or a system. We'll create a simple interface for the Car class, exposing only the necessary functionalities without exposing the internal details.

javascript
Copy code
class Car {
    constructor(make, model, year) {
        this.make = make;
        this.model = model;
        this.year = year;
        this.started = false;
    }

    start() {
        this.started = true;
        console.log('Engine started');
    }

    drive() {
        if (this.started) {
            console.log(`Driving ${this.year} ${this.make} ${this.model}`);
        } else {
            console.log('Please start the engine first');
        }
    }
}

// Abstraction: Users interact with Car through simplified interface
function startAndDrive(car) {
    car.start();
    car.drive();
}

const myCar = new Car('Toyota', 'Camry', 2022);
startAndDrive(myCar); // Output: Engine started, Driving 2022 Toyota Camry
In this example:

The startAndDrive() function provides a simplified interface for interacting with the Car object. Users don't need to know the internal details of how starting and driving a car work; they just call this function to perform these actions.
The complexity of starting and driving the car is abstracted away, and users interact with the car through a simple interface.
